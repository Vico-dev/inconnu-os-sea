const { PrismaClient } = require('@prisma/client')

async function diagnoseDatabase() {
  const prisma = new PrismaClient()
  
  try {
    console.log('üîç Diagnostic de la base de donn√©es...')
    
    // Test de connexion
    await prisma.$connect()
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie')
    
    // V√©rifier la structure de la table users
    console.log('\nüìã Structure de la table users:')
    const userColumns = await prisma.$queryRaw`
      SELECT column_name, data_type, is_nullable 
      FROM information_schema.columns 
      WHERE table_name = 'users' 
      ORDER BY ordinal_position
    `
    console.table(userColumns)
    
    // V√©rifier les migrations appliqu√©es
    console.log('\nüì¶ Migrations appliqu√©es:')
    const migrations = await prisma.$queryRaw`
      SELECT * FROM _prisma_migrations 
      ORDER BY finished_at DESC
    `
    console.table(migrations)
    
    // V√©rifier si la colonne emailVerifiedAt existe
    const hasEmailVerifiedAt = userColumns.some(col => col.column_name === 'emailVerifiedAt')
    console.log(`\nüîç Colonne emailVerifiedAt existe: ${hasEmailVerifiedAt}`)
    
    if (!hasEmailVerifiedAt) {
      console.log('\n‚ö†Ô∏è  La colonne emailVerifiedAt manque !')
      console.log('üõ†Ô∏è  Application des migrations...')
      
      // Appliquer les migrations
      const { execSync } = require('child_process')
      try {
        execSync('npx prisma migrate deploy', { stdio: 'inherit' })
        console.log('‚úÖ Migrations appliqu√©es avec succ√®s')
      } catch (error) {
        console.error('‚ùå Erreur lors de l\'application des migrations:', error.message)
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erreur de diagnostic:', error)
  } finally {
    await prisma.$disconnect()
  }
}

diagnoseDatabase() 