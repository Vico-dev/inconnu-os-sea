// Script Prisma pour cr√©er un administrateur de test
const { PrismaClient } = require('@prisma/client');
const bcrypt = require('bcryptjs');

const prisma = new PrismaClient();

async function createAdminUser() {
  try {
    console.log('üë§ Cr√©ation d\'un administrateur de test via Prisma...\n');

    // V√©rifier si l'utilisateur existe d√©j√†
    const existingUser = await prisma.user.findUnique({
      where: { email: 'victor@agence-inconnu.fr' }
    });

    if (existingUser) {
      console.log('‚úÖ Utilisateur victor@agence-inconnu.fr existe d√©j√†');
      console.log('üîë Identifiants:');
      console.log('   Email: victor@agence-inconnu.fr');
      console.log('   Mot de passe: Test123!');
      console.log('   R√¥le: ADMIN');
      return;
    }

    // Hasher le mot de passe
    const hashedPassword = await bcrypt.hash('Test123!', 10);

    // Cr√©er l'utilisateur
    const user = await prisma.user.create({
      data: {
        email: 'victor@agence-inconnu.fr',
        password: hashedPassword,
        firstName: 'Victor',
        lastName: 'Soldet',
        role: 'ADMIN',
        emailVerified: true
      }
    });

    console.log('‚úÖ Administrateur cr√©√© avec succ√®s:', user);
    console.log('\nüîë Identifiants de test:');
    console.log(`   Email: ${user.email}`);
    console.log(`   Mot de passe: Test123!`);
    console.log(`   R√¥le: ${user.role}`);
    console.log(`   ID: ${user.id}`);

  } catch (error) {
    console.error('‚ùå Erreur cr√©ation utilisateur:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Lancer la cr√©ation
createAdminUser(); 