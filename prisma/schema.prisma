// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  firstName             String
  lastName              String
  password              String
  role                  String   @default("CLIENT") // CLIENT, ACCOUNT_MANAGER, ADMIN
  company               String?
  phone                 String?
  emailVerified         Boolean  @default(false)
  emailVerificationToken String? @unique
  emailVerificationExpires DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  clientAccount         ClientAccount?
  accountManager        AccountManager?
  googleAdsConnection   GoogleAdsConnection?
  ticketResponses       TicketResponse[]
  googleAdsPermissions  GoogleAdsPermission[]

  @@map("users")
}

model Company {
  id                String   @id @default(cuid())
  name              String
  website           String?
  industry          String
  teamSize          String?
  goals             String? // JSON string
  googleAdsAccount  String?
  currentChallenges String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  clientAccounts ClientAccount[]
  accountManagers AccountManager[]

  @@map("companies")
}

model ClientAccount {
  id                    String   @id @default(cuid())
  userId                String   @unique
  companyId             String
  subscriptionPlan      String?
  monthlyBudget         Float?
  onboardingCompleted   Boolean  @default(false)
  googleAdsConnected    Boolean  @default(false)
  status                String   @default("ACTIVE") // ACTIVE, CANCELLED, SUSPENDED
  endDate               DateTime?
  cgvAccepted           Boolean  @default(false)
  cgvAcceptedAt         DateTime?
  cgvVersion            String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company     @relation(fields: [companyId], references: [id])
  subscription Subscription?
  appointments Appointment[]
  campaigns   Campaign[]
  invoices    Invoice[]
  tickets     Ticket[]
  googleAdsPermissions GoogleAdsPermission[]
  emailReminders EmailReminder[]
  advertisingMandates AdvertisingMandate[]

  @@map("client_accounts")
}

model AccountManager {
  id        String   @id @default(cuid())
  userId    String   @unique
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id])
  tickets  Ticket[]
  appointments Appointment[]

  @@map("account_managers")
}

model Subscription {
  id                    String   @id @default(cuid())
  clientAccountId       String   @unique
  plan                  String   // SMALL_BUDGET, MEDIUM_BUDGET, LARGE_BUDGET
  status                String   // TRIAL, ACTIVE, CANCELLED, SUSPENDED
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  trialStart            DateTime?
  trialEnd              DateTime?
  amount                Float
  currency              String   @default("EUR")
  endDate               DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model GoogleAdsConnection {
  id            String   @id @default(cuid())
  userId        String   @unique
  accessToken   String
  refreshToken  String?
  tokenExpiry   DateTime?
  accounts      String?  // JSON string of accessible accounts
  isConnected   Boolean  @default(false)
  connectedAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("google_ads_connections")
}

// Nouveau modèle pour gérer les permissions MCC
model GoogleAdsPermission {
  id              String   @id @default(cuid())
  clientAccountId String
  userId          String
  googleAdsCustomerId String // ID du compte Google Ads client
  permissions     String   // JSON string: {read: true, write: false, admin: false}
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clientAccountId, googleAdsCustomerId])
  @@map("google_ads_permissions")
}

model Campaign {
  id          String   @id @default(cuid())
  clientAccountId String
  name        String
  status      String   // ACTIVE, PAUSED, REMOVED
  budget      Float?
  metrics     String?  // JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@unique([clientAccountId, name])
  @@map("campaigns")
}

model Invoice {
  id          String   @id @default(cuid())
  clientAccountId String
  number      String
  amount      Float
  status      String   // DRAFT, SENT, PAID, OVERDUE
  dueDate     DateTime
  items       String?  // JSON string
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Ticket {
  id          String   @id @default(cuid())
  clientAccountId String
  accountManagerId String?
  subject     String
  description String
  status      String   // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  priority    String   // LOW, MEDIUM, HIGH, URGENT
  category    String   // TECHNICAL, BILLING, OPTIMIZATION, ACCOUNT, OTHER
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)
  accountManager AccountManager? @relation(fields: [accountManagerId], references: [id])
  responses    TicketResponse[]

  @@map("tickets")
}

model TicketResponse {
  id          String   @id @default(cuid())
  ticketId    String
  userId      String
  content     String
  isFromAM    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

model Appointment {
  id          String   @id @default(cuid())
  clientAccountId String
  accountManagerId String?
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      String   // SCHEDULED, CONFIRMED, CANCELLED, COMPLETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)
  accountManager AccountManager? @relation(fields: [accountManagerId], references: [id])

  @@map("appointments")
}

model Prospect {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String?
  company     String?
  message     String?
  source      String   @default("WEBSITE") // WEBSITE, REFERRAL, SOCIAL_MEDIA
  status      String   @default("NEW") // NEW, CONTACTED, QUALIFIED, CONVERTED, LOST
  notes       String?
  score       Int?     // Score de 1 à 10
  budget      Float?   // Budget estimé en euros
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("prospects")
}

// Modèle pour gérer les relances d'emails
model EmailReminder {
  id              String   @id @default(cuid())
  clientAccountId String
  reminderType    String   // REMINDER_1, REMINDER_2, REMINDER_3, REMINDER_4
  scheduledAt     DateTime
  sentAt          DateTime?
  status          String   @default("PENDING") // PENDING, SENT, CANCELLED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@unique([clientAccountId, reminderType])
  @@map("email_reminders")
} 

// Mandat publicitaire à signer et revalider chaque année
model AdvertisingMandate {
  id               String   @id @default(cuid())
  clientAccountId  String
  mandateNumber    String   @unique
  status           String   @default("PENDING") // PENDING, ACTIVE, EXPIRED
  version          String   @default("v1.0")
  signedByName     String?
  signedByEmail    String?
  signedAt         DateTime?
  validFrom        DateTime?
  validUntil       DateTime?
  documentUrl      String?
  
  // Informations de budget média
  totalAnnualBudget Float?  // Budget annuel total en euros
  monthlyBudgets   Json?    // Budgets mensuels détaillés [{"month": 1, "amount": 1000}, ...]
  budgetType       String?  // "FIXED" (montant fixe) ou "VARIABLE" (montants variables par mois)
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@index([clientAccountId])
  @@map("advertising_mandates")
}