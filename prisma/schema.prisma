// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String   @id @default(cuid())
  email                 String   @unique
  firstName             String
  lastName              String
  password              String
  role                  String   @default("CLIENT") // CLIENT, ACCOUNT_MANAGER, ADMIN
  company               String?
  phone                 String?
  emailVerified         Boolean  @default(false)
  emailVerificationToken String? @unique
  emailVerificationExpires DateTime?
  emailVerifiedAt       DateTime?
  // Nouveaux champs pour la réinitialisation de mot de passe
  passwordResetToken    String? @unique
  passwordResetExpires  DateTime?
  twoFactorSecret       String?
  twoFactorEnabled      Boolean  @default(false)
  twoFactorEnabledAt    DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  clientAccount         ClientAccount?
  accountManager        AccountManager?
  ticketResponses       TicketResponse[]
  googleAdsPermissions  GoogleAdsPermission[]
  googleAdsConnections  GoogleAdsConnection[]
  shopifyStores         ShopifyStore[]
  notifications         Notification[]
  createdCampaigns      Campaign[]

  @@map("users")
}

model Company {
  id                String   @id @default(cuid())
  name              String
  website           String?
  industry          String
  teamSize          String?
  goals             String? // JSON string
  googleAdsAccount  String?
  currentChallenges String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  clientAccounts ClientAccount[]
  accountManagers AccountManager[]

  @@map("companies")
}

model ClientAccount {
  id                    String   @id @default(cuid())
  userId                String   @unique
  companyId             String
  merchantCenterMerchantId String? // Merchant ID GMC du client
  subscriptionPlan      String?
  monthlyBudget         Float?
  onboardingCompleted   Boolean  @default(false)
  status                String   @default("ACTIVE") // ACTIVE, CANCELLED, SUSPENDED
  endDate               DateTime?
  cgvAccepted           Boolean  @default(false)
  cgvAcceptedAt         DateTime?
  cgvVersion            String?
  assignedAccountManagerId String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  company     Company     @relation(fields: [companyId], references: [id])
  assignedAccountManager AccountManager? @relation(fields: [assignedAccountManagerId], references: [id])
  subscription Subscription?
  appointments Appointment[]
  campaigns   Campaign[]
  invoices    Invoice[]
  tickets     Ticket[]
  googleAdsPermissions GoogleAdsPermission[]
  emailReminders EmailReminder[]
  advertisingMandates AdvertisingMandate[]
  notifications Notification[]
  aiCampaigns AICampaign[]
  aiTasks AITask[]
  // Feed Manager relations
  productOptimizations ProductOptimization[]
  memberPrices          MemberPrice[]
  csvImportJobs         CsvImportJob[]

  @@map("client_accounts")
}

model AccountManager {
  id        String   @id @default(cuid())
  userId    String   @unique
  companyId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  company Company? @relation(fields: [companyId], references: [id])
  tickets  Ticket[]
  appointments Appointment[]
  assignedClients ClientAccount[]

  @@map("account_managers")
}

model Subscription {
  id                    String   @id @default(cuid())
  clientAccountId       String   @unique
  plan                  String   // SMALL_BUDGET, MEDIUM_BUDGET, LARGE_BUDGET
  status                String   // TRIAL, ACTIVE, CANCELLED, SUSPENDED
  stripeCustomerId      String?
  stripeSubscriptionId  String?
  currentPeriodStart    DateTime?
  currentPeriodEnd      DateTime?
  trialStart            DateTime?
  trialEnd              DateTime?
  amount                Float
  currency              String   @default("EUR")
  endDate               DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model GoogleAdsConnection {
  id            String   @id @default(cuid())
  userId        String
  customerId    String   // ID du compte Google Ads spécifique
  customerName  String   // Nom du compte Google Ads
  accessToken   String
  refreshToken  String?
  tokenExpiry   DateTime?
  isConnected   Boolean  @default(false)
  connectedAt   DateTime?
  isPrimary     Boolean  @default(false) // Compte principal pour ce client
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, customerId]) // Un utilisateur peut avoir plusieurs comptes, mais pas de doublons
  @@map("google_ads_connections")
}

model ShopifyStore {
  id          String   @id @default(cuid())
  userId      String
  name        String
  domain      String
  email       String
  currency    String
  country     String
  timezone    String
  accessToken String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, domain])
  @@map("shopify_stores")
}

// Nouveau modèle pour gérer les permissions MCC
model GoogleAdsPermission {
  id              String   @id @default(cuid())
  clientAccountId String
  userId          String
  googleAdsCustomerId String // ID du compte Google Ads client
  permissions     String   // JSON string: {read: true, write: false, admin: false}
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([clientAccountId, googleAdsCustomerId])
  @@map("google_ads_permissions")
}

model Campaign {
  id          String   @id @default(cuid())
  name        String
  type        CampaignType
  objective   String   // SALES, LEADS, AWARENESS
  status      CampaignStatus @default(DRAFT)
  budget      Float
  targetAudience String?
  keywords    String?  // JSON string des mots-clés
  locations   String?  // JSON string des localisations
  language    String   @default("fr")
  description String?
  startDate   DateTime?
  endDate     DateTime?
  
  // Relations
  clientAccountId String
  clientAccount   ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)
  createdBy       String
  createdByUser   User @relation(fields: [createdBy], references: [id])
  
  // Workflow d'approbation
  approval    CampaignApproval?
  
  // Google Ads integration
  googleAdsCampaignId String?  @unique
  metrics     String?  // JSON string des métriques
  
  // Tests A/B
  abTests     ABTest[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Invoice {
  id              String   @id @default(cuid())
  clientAccountId String
  stripeInvoiceId String?  @unique
  number          String
  amount          Float
  currency        String   @default("EUR")
  status          String   // DRAFT, SENT, PAID, FAILED, OVERDUE
  dueDate         DateTime?
  paidAt          DateTime?
  failedAt        DateTime?
  failureReason   String?
  invoiceUrl      String?
  invoicePdfUrl   String?
  items           String?  // JSON string
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@map("invoices")
}

model Ticket {
  id          String   @id @default(cuid())
  clientAccountId String
  accountManagerId String?
  subject     String
  description String
  status      String   // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  priority    String   // LOW, MEDIUM, HIGH, URGENT
  category    String   // TECHNICAL, BILLING, OPTIMIZATION, ACCOUNT, OTHER
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)
  accountManager AccountManager? @relation(fields: [accountManagerId], references: [id])
  responses    TicketResponse[]

  @@map("tickets")
}

model TicketResponse {
  id          String   @id @default(cuid())
  ticketId    String
  userId      String
  content     String
  isFromAM    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ticket      Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

model Appointment {
  id          String   @id @default(cuid())
  clientAccountId String
  accountManagerId String?
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  status      String   // SCHEDULED, CONFIRMED, CANCELLED, COMPLETED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)
  accountManager AccountManager? @relation(fields: [accountManagerId], references: [id])

  @@map("appointments")
}

model Prospect {
  id          String   @id @default(cuid())
  firstName   String
  lastName    String
  email       String
  phone       String?
  company     String?
  message     String?
  source      String   @default("WEBSITE") // WEBSITE, REFERRAL, SOCIAL_MEDIA
  status      String   @default("NEW") // NEW, CONTACTED, QUALIFIED, CONVERTED, LOST
  notes       String?
  score       Int?     // Score de 1 à 10
  budget      Float?   // Budget estimé en euros
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("prospects")
}



// Modèle pour gérer les relances d'emails
model EmailReminder {
  id              String   @id @default(cuid())
  clientAccountId String
  reminderType    String   // REMINDER_1, REMINDER_2, REMINDER_3, REMINDER_4
  scheduledAt     DateTime
  sentAt          DateTime?
  status          String   @default("PENDING") // PENDING, SENT, CANCELLED
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@unique([clientAccountId, reminderType])
  @@map("email_reminders")
} 

// Mandat publicitaire à signer et revalider chaque année
model AdvertisingMandate {
  id               String   @id @default(cuid())
  clientAccountId  String
  mandateNumber    String   @unique
  status           String   @default("PENDING") // DRAFT, PENDING, ACTIVE, EXPIRED
  version          String   @default("v1.0")
  signedByName     String?
  signedByEmail    String?
  signedAt         DateTime?
  validFrom        DateTime?
  validUntil       DateTime?
  documentUrl      String?

  // Informations de budget média
  totalAnnualBudget Float?
  monthlyBudgets   Json?
  budgetType       String?

  // Gestion de trésorerie
  treasuryManagement Boolean @default(false)
  managementFees    Float?
  paymentTerms      String?

  // Traçabilité juridique
  consentData      Json?
  scrollTracking   Json?
  emailConfirmation Json?
  legalVersion     String   @default("v1.0")
  termsAccepted    Boolean  @default(false)
  gdprAccepted     Boolean  @default(false)

  // Signature électronique sécurisée
  signatureCode    String?
  signatureVerified Boolean @default(false)
  signatureExpiresAt DateTime?

  // Pré-remplissage par l'admin
  initiatedBy       String   @default("CLIENT") // CLIENT | ADMIN
  prefilledByAdmin  Boolean  @default(false)
  prefilledAt       DateTime?
  editableByClient  Boolean  @default(false)
  inviteToken       String?  @unique
  invitationSentAt  DateTime?

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@index([clientAccountId])
  @@map("advertising_mandates")
}

// Modèle pour les notifications système
model Notification {
  id              String   @id @default(cuid())
  userId          String?
  clientAccountId String?
  type            String   // info, success, warning, error
  title           String
  message         String
  actionUrl       String?
  priority        String   @default("medium") // low, medium, high
  read            Boolean  @default(false)
  readAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  clientAccount ClientAccount? @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([clientAccountId])
  @@map("notifications")
}

// Modèle pour les campagnes générées par IA
model AICampaign {
  id                String   @id @default(cuid())
  clientAccountId   String
  name              String
  website           String
  industry          String?
  targetAudience    String?
  budget            Float?
  status            String   @default("DRAFT") // DRAFT, REVIEW, APPROVED, REJECTED, PUBLISHED
  aiGeneratedAt     DateTime @default(now())
  reviewedBy        String?
  reviewedAt        DateTime?
  notes             String?
  
  // Données scrapées du site
  scrapedData       Json?    // Pages, produits, services, etc.
  
  // Assets générés par IA
  keywords          Json?    // Mots-clés générés
  adCopy            Json?    // Textes d'annonces
  headlines         Json?    // Titres d'annonces
  descriptions      Json?    // Descriptions d'annonces
  landingPages      Json?    // Suggestions de pages de destination
  
  // Métriques de performance
  performanceScore  Float?
  relevanceScore    Float?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)
  aiTasks AITask[]

  @@index([clientAccountId])
  @@index([status])
  @@map("ai_campaigns")
}

// Modèle pour les tâches de scraping et génération IA
model AITask {
  id                String   @id @default(cuid())
  clientAccountId   String
  campaignId        String?
  taskType          String   // SCRAPING, KEYWORD_GENERATION, AD_COPY_GENERATION, OPTIMIZATION
  status            String   @default("PENDING") // PENDING, PROCESSING, COMPLETED, FAILED
  progress          Int      @default(0) // 0-100
  result            Json?
  error             String?
  startedAt         DateTime?
  completedAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)
  campaign     AICampaign?   @relation(fields: [campaignId], references: [id], onDelete: Cascade)

  @@index([clientAccountId])
  @@index([campaignId])
  @@index([status])
  @@map("ai_tasks")
}

model CampaignApproval {
  id          String   @id @default(cuid())
  campaignId  String
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  // Workflow
  status      ApprovalStatus @default(PENDING)
  currentStep Int @default(1)
  totalSteps  Int @default(3)
  
  // Approbateurs
  submittedBy String
  submittedAt DateTime @default(now())
  
  // Approbations
  approvals   CampaignApprovalStep[]
  
  // Historique
  history     CampaignApprovalHistory[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([campaignId])
}

model CampaignApprovalStep {
  id                String   @id @default(cuid())
  approvalId        String
  approval          CampaignApproval @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  
  stepNumber        Int
  stepName          String // "REVIEW", "APPROVE", "FINAL_APPROVE"
  
  // Approbateur
  approverId        String
  approverRole      String // CLIENT, ACCOUNT_MANAGER, ADMIN
  approverName      String
  
  // Statut
  status            ApprovalStepStatus @default(PENDING)
  approvedAt        DateTime?
  rejectedAt        DateTime?
  comments          String?
  
  // Notifications
  notifiedAt        DateTime?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([approvalId, stepNumber])
}

model CampaignApprovalHistory {
  id          String   @id @default(cuid())
  approvalId  String
  approval    CampaignApproval @relation(fields: [approvalId], references: [id], onDelete: Cascade)
  
  action      String // "SUBMITTED", "APPROVED", "REJECTED", "COMMENT_ADDED"
  userId      String
  userName    String
  userRole    String // CLIENT, ACCOUNT_MANAGER, ADMIN
  
  // Détails de la modification
  fieldName   String?
  oldValue    String?
  newValue    String?
  comments    String?
  
  timestamp   DateTime @default(now())
}

enum ApprovalStatus {
  PENDING
  IN_REVIEW
  APPROVED
  REJECTED
  CANCELLED
}

enum ApprovalStepStatus {
  PENDING
  APPROVED
  REJECTED
  SKIPPED
}

enum CampaignType {
  SEARCH
  SHOPPING
  DISPLAY
  VIDEO
  PMAX
  DEMAND_GEN
}

enum CampaignStatus {
  DRAFT
  PENDING_APPROVAL
  APPROVED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
}

// Modèle pour les Tests A/B
model ABTest {
  id              String   @id @default(cuid())
  name            String
  description     String?
  campaignId      String
  testType        String   // HEADLINES, DESCRIPTIONS, LANDING_PAGES, BIDDING_STRATEGIES, KEYWORDS
  status          String   @default("DRAFT") // DRAFT, RUNNING, PAUSED, COMPLETED
  startDate       DateTime?
  endDate         DateTime?
  trafficSplit    Int      @default(50) // Pourcentage de trafic alloué au test
  confidenceLevel Float?   // Niveau de confiance statistique
  winner          String?  // ID de la variante gagnante
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  campaign        Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  variants        ABTestVariant[]

  @@map("ab_tests")
}

model ABTestVariant {
  id          String   @id @default(cuid())
  testId      String
  name        String
  content     String
  isControl   Boolean  @default(false)
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  ctr         Float    @default(0)
  conversionRate Float @default(0)
  cpc         Float    @default(0)
  roas        Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  test        ABTest @relation(fields: [testId], references: [id], onDelete: Cascade)

  @@map("ab_test_variants")
}

// === Feed Manager: Optimisations produits (titres/descriptions IA) ===
model ProductOptimization {
  id                    String   @id @default(cuid())
  clientAccountId       String
  gtin                  String
  language              String   @default("fr")
  // Données originales (sources Shopify/GMC)
  originalTitle         String?
  originalDescription   String?
  originalPublicPrice   Float?
  originalCurrency      String?  @default("EUR")
  // Propositions IA
  aiTitle               String?
  aiDescription         String?
  aiPublicPrice         Float?
  aiMeta                Json?
  // Workflow
  status                OptimizationStatus @default(DRAFT)
  source                OptimizationSource  @default(AI)
  approvedBy            String?
  approvedAt            DateTime?
  publishedAt           DateTime?
  notes                 String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@index([clientAccountId])
  @@index([gtin])
  @@unique([clientAccountId, gtin, language])
  @@map("product_optimizations")
}

enum OptimizationStatus {
  DRAFT
  APPROVED
  PUBLISHED
  REJECTED
}

enum OptimizationSource {
  AI
  CSV
  MANUAL
}

// === Feed Manager: Prix membres (loyalty_program) ===
model MemberPrice {
  id               String   @id @default(cuid())
  clientAccountId  String
  gtin             String
  country          String   @default("FR")
  currency         String   @default("EUR")
  loyaltyLevel     String   @default("MEMBER")
  publicPrice      Float
  memberPrice      Float
  validFrom        DateTime?
  validTo          DateTime?
  source           OptimizationSource @default(CSV)
  status           MemberPriceStatus  @default(DRAFT)
  notes            String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)

  @@index([clientAccountId])
  @@index([gtin])
  @@unique([clientAccountId, gtin, country, loyaltyLevel])
  @@map("member_prices")
}

enum MemberPriceStatus {
  DRAFT
  APPROVED
  PUBLISHED
  EXPIRED
}

// === Feed Manager: Imports CSV (batch) ===
model CsvImportJob {
  id               String   @id @default(cuid())
  clientAccountId  String
  filename         String
  status           ImportStatus @default(PENDING)
  summary          Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  clientAccount ClientAccount @relation(fields: [clientAccountId], references: [id], onDelete: Cascade)
  items         CsvImportItem[]

  @@index([clientAccountId])
  @@map("csv_import_jobs")
}

model CsvImportItem {
  id          String   @id @default(cuid())
  jobId       String
  gtin        String
  // Champs optionnels importables
  title       String?
  description String?
  publicPrice Float?
  memberPrice Float?
  currency    String? @default("EUR")
  country     String? @default("FR")
  // Validation
  errors      String?
  status      ImportItemStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  job CsvImportJob @relation(fields: [jobId], references: [id], onDelete: Cascade)

  @@index([jobId])
  @@index([gtin])
  @@map("csv_import_items")
}

enum ImportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum ImportItemStatus {
  PENDING
  ACCEPTED
  REJECTED
}

