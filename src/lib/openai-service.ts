import OpenAI from 'openai'

// Initialiser OpenAI seulement si la cl√© API est disponible
let openai: OpenAI | null = null

if (process.env.OPENAI_API_KEY) {
  openai = new OpenAI({
    apiKey: process.env.OPENAI_API_KEY,
  })
}

export interface AIGenerationRequest {
  type: 'keywords' | 'headlines' | 'descriptions' | 'optimization'
  industry: string
  website: string
  goals: string[]
  budget?: number
  context?: string
}

export interface AIGenerationResponse {
  content: string[]
  suggestions: string[]
  confidence: number
}

export class OpenAIService {
  
  // üîç G√âN√âRATION DE MOTS-CL√âS
  async generateKeywords(request: AIGenerationRequest): Promise<AIGenerationResponse> {
    try {
      // V√©rifier si OpenAI est disponible
      if (!openai) {
        console.log('‚ö†Ô∏è OpenAI non configur√©, utilisation des donn√©es simul√©es')
        return this.getSimulatedKeywords(request)
      }

      const prompt = `
Tu es un expert en Google Ads sp√©cialis√© dans la g√©n√©ration de mots-cl√©s optimis√©s.

Contexte:
- Industrie: ${request.industry}
- Site web: ${request.website}
- Objectifs: ${request.goals.join(', ')}
- Budget: ${request.budget || 'Non sp√©cifi√©'}‚Ç¨/jour

G√©n√®re une liste de 15-20 mots-cl√©s Google Ads optimis√©s, organis√©s par type:

1. Mots-cl√©s EXACT (5-7 mots-cl√©s):
   - Mots-cl√©s principaux avec volume de recherche √©lev√©
   - Format: "mot-cl√© exact"

2. Mots-cl√©s PHRASE (5-7 mots-cl√©s):
   - Mots-cl√©s long-tail avec bonne conversion
   - Format: "mot cl√© phrase"

3. Mots-cl√©s BROAD (5-6 mots-cl√©s):
   - Mots-cl√©s de d√©couverte avec volume mod√©r√©
   - Format: mot cl√© broad

4. Suggestions d'optimisation (3-5 conseils):
   - Strat√©gies pour am√©liorer les performances

Retourne uniquement la liste format√©e, sans explications suppl√©mentaires.
`

      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "Tu es un expert en marketing digital et Google Ads. R√©ponds de mani√®re concise et pratique."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 1000
      })

      const response = completion.choices[0]?.message?.content || ''
      
      // Parser la r√©ponse
      const lines = response.split('\n').filter(line => line.trim())
      const keywords: string[] = []
      const suggestions: string[] = []
      
      let currentSection = ''
      
      for (const line of lines) {
        if (line.includes('EXACT') || line.includes('PHRASE') || line.includes('BROAD')) {
          currentSection = line
        } else if (line.includes('Suggestions') || line.includes('optimisation')) {
          currentSection = 'suggestions'
        } else if (line.trim() && !line.startsWith('-') && !line.startsWith('‚Ä¢')) {
          if (currentSection === 'suggestions') {
            suggestions.push(line.trim())
          } else {
            keywords.push(line.trim())
          }
        }
      }

      return {
        content: keywords,
        suggestions,
        confidence: 0.85
      }

    } catch (error) {
      console.error('Erreur g√©n√©ration mots-cl√©s OpenAI:', error)
      console.log('‚ö†Ô∏è Fallback vers les donn√©es simul√©es')
      return this.getSimulatedKeywords(request)
    }
  }

  // üìù G√âN√âRATION DE HEADLINES
  async generateHeadlines(request: AIGenerationRequest): Promise<AIGenerationResponse> {
    try {
      // V√©rifier si OpenAI est disponible
      if (!openai) {
        console.log('‚ö†Ô∏è OpenAI non configur√©, utilisation des donn√©es simul√©es')
        return this.getSimulatedHeadlines(request)
      }

      const prompt = `
Tu es un expert en copywriting pour Google Ads.

Contexte:
- Industrie: ${request.industry}
- Site web: ${request.website}
- Objectifs: ${request.goals.join(', ')}

G√©n√®re 8-10 headlines d'annonces Google Ads optimis√©es qui respectent:
- Maximum 30 caract√®res par headline
- Incluent des mots-cl√©s pertinents
- Cr√©ent de l'urgence ou de la valeur
- Utilisent des chiffres et des preuves sociales

Format de r√©ponse:
- Une headline par ligne
- Pas de num√©rotation
- Pas d'explications

Exemple de style:
"Agence Marketing | +200% ROI"
"Conseil Expert | Gratuit 30min"
"Optimisation Conversion | R√©sultats"
`

      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "Tu es un expert copywriter sp√©cialis√© dans les annonces Google Ads. Cr√©e des headlines percutantes et optimis√©es."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.8,
        max_tokens: 500
      })

      const response = completion.choices[0]?.message?.content || ''
      const headlines = response.split('\n').filter(line => line.trim())

      return {
        content: headlines,
        suggestions: [
          'Testez diff√©rentes combinaisons de headlines',
          'Utilisez des extensions d\'annonces pour plus d\'informations',
          'A/B testez les headlines les plus performantes'
        ],
        confidence: 0.9
      }

    } catch (error) {
      console.error('Erreur g√©n√©ration headlines OpenAI:', error)
      console.log('‚ö†Ô∏è Fallback vers les donn√©es simul√©es')
      return this.getSimulatedHeadlines(request)
    }
  }

  // üìÑ G√âN√âRATION DE DESCRIPTIONS
  async generateDescriptions(request: AIGenerationRequest): Promise<AIGenerationResponse> {
    try {
      // V√©rifier si OpenAI est disponible
      if (!openai) {
        console.log('‚ö†Ô∏è OpenAI non configur√©, utilisation des donn√©es simul√©es')
        return this.getSimulatedDescriptions(request)
      }

      const prompt = `
Tu es un expert en copywriting pour Google Ads.

Contexte:
- Industrie: ${request.industry}
- Site web: ${request.website}
- Objectifs: ${request.goals.join(', ')}

G√©n√®re 4-5 descriptions d'annonces Google Ads optimis√©es qui respectent:
- Maximum 90 caract√®res par description
- Incluent un appel √† l'action clair
- Mettent en avant les b√©n√©fices
- Utilisent des preuves sociales ou des garanties

Format de r√©ponse:
- Une description par ligne
- Pas de num√©rotation
- Pas d'explications

Exemple de style:
"Agence marketing digitale sp√©cialis√©e dans l'optimisation des conversions. R√©sultats garantis ou rembours√©. Consultation gratuite."
"Strat√©gie marketing personnalis√©e pour votre entreprise. Augmentation moyenne du ROI de 200%. Devis gratuit."
`

      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "Tu es un expert copywriter sp√©cialis√© dans les descriptions d'annonces Google Ads. Cr√©e des descriptions persuasives et optimis√©es."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.8,
        max_tokens: 500
      })

      const response = completion.choices[0]?.message?.content || ''
      const descriptions = response.split('\n').filter(line => line.trim())

      return {
        content: descriptions,
        suggestions: [
          'Incluez toujours un appel √† l\'action',
          'Utilisez des chiffres et des preuves sociales',
          'Testez diff√©rentes longueurs de descriptions'
        ],
        confidence: 0.9
      }

    } catch (error) {
      console.error('Erreur g√©n√©ration descriptions OpenAI:', error)
      console.log('‚ö†Ô∏è Fallback vers les donn√©es simul√©es')
      return this.getSimulatedDescriptions(request)
    }
  }

  // ‚ö° G√âN√âRATION DE SUGGESTIONS D'OPTIMISATION
  async generateOptimizationSuggestions(request: AIGenerationRequest): Promise<AIGenerationResponse> {
    try {
      // V√©rifier si OpenAI est disponible
      if (!openai) {
        console.log('‚ö†Ô∏è OpenAI non configur√©, utilisation des donn√©es simul√©es')
        return this.getSimulatedOptimizationSuggestions(request)
      }

      const prompt = `
Tu es un expert en optimisation Google Ads.

Contexte:
- Industrie: ${request.industry}
- Site web: ${request.website}
- Objectifs: ${request.goals.join(', ')}
- Budget: ${request.budget || 'Non sp√©cifi√©'}‚Ç¨/jour
- Contexte suppl√©mentaire: ${request.context || 'Aucun'}

G√©n√®re 5-7 suggestions d'optimisation sp√©cifiques et actionnables pour am√©liorer les performances des campagnes Google Ads.

Les suggestions doivent inclure:
- Optimisation des mots-cl√©s
- Am√©lioration des annonces
- Gestion du budget
- Ciblage et audiences
- Tests A/B

Format de r√©ponse:
- Une suggestion par ligne
- Commence par un verbe d'action
- Sois sp√©cifique et mesurable
- Pas de num√©rotation

Exemple de style:
"Pausez les mots-cl√©s avec un CTR < 1% depuis 14 jours"
"Augmentez les ench√®res de 20% sur les mots-cl√©s avec un ROAS > 3"
"Cr√©ez 3 nouvelles annonces par groupe d'annonces"
`

      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "Tu es un expert en optimisation Google Ads. Donne des conseils pratiques et actionnables."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.7,
        max_tokens: 800
      })

      const response = completion.choices[0]?.message?.content || ''
      const suggestions = response.split('\n').filter(line => line.trim())

      return {
        content: suggestions,
        suggestions: [
          'Priorisez les optimisations par impact potentiel',
          'Testez les changements sur de petits volumes d\'abord',
          'Surveillez les performances apr√®s chaque optimisation'
        ],
        confidence: 0.8
      }

    } catch (error) {
      console.error('Erreur g√©n√©ration suggestions OpenAI:', error)
      console.log('‚ö†Ô∏è Fallback vers les donn√©es simul√©es')
      return this.getSimulatedOptimizationSuggestions(request)
    }
  }

  // üéØ ANALYSE DE PERFORMANCE
  async analyzePerformance(metrics: any): Promise<AIGenerationResponse> {
    try {
      // V√©rifier si OpenAI est disponible
      if (!openai) {
        console.log('‚ö†Ô∏è OpenAI non configur√©, utilisation des donn√©es simul√©es')
        return this.getSimulatedPerformanceAnalysis(metrics)
      }

      const prompt = `
Tu es un expert en analyse de performance Google Ads.

M√©triques actuelles:
- CTR: ${metrics.ctr}%
- CPC: ‚Ç¨${metrics.cpc}
- ROAS: ${metrics.roas}x
- Conversions: ${metrics.conversions}
- Co√ªt: ‚Ç¨${metrics.cost}

Analyse ces performances et g√©n√®re:
1. 3-5 probl√®mes identifi√©s
2. 3-5 solutions d'am√©lioration
3. 2-3 opportunit√©s d'optimisation

Format de r√©ponse:
- Probl√®mes: "Probl√®me: [description]"
- Solutions: "Solution: [action concr√®te]"
- Opportunit√©s: "Opportunit√©: [suggestion]"
`

      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "Tu es un expert en analyse de performance Google Ads. Analyse les donn√©es et propose des am√©liorations."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        temperature: 0.6,
        max_tokens: 600
      })

      const response = completion.choices[0]?.message?.content || ''
      const analysis = response.split('\n').filter(line => line.trim())

      return {
        content: analysis,
        suggestions: [
          'Surveillez ces m√©triques r√©guli√®rement',
          'Impl√©mentez les solutions par ordre de priorit√©',
          'Mesurez l\'impact de chaque changement'
        ],
        confidence: 0.85
      }

    } catch (error) {
      console.error('Erreur analyse performance OpenAI:', error)
      console.log('‚ö†Ô∏è Fallback vers les donn√©es simul√©es')
      return this.getSimulatedPerformanceAnalysis(metrics)
    }
  }

  // üéØ M√âTHODES DE FALLBACK (donn√©es simul√©es)
  private getSimulatedKeywords(request: AIGenerationRequest): AIGenerationResponse {
    const keywords = [
      `${request.industry} expert`,
      `${request.industry} professionnel`,
      `${request.industry} sp√©cialiste`,
      `${request.industry} conseil`,
      `${request.industry} service`,
      `meilleur ${request.industry}`,
      `${request.industry} pas cher`,
      `${request.industry} prix`,
      `${request.industry} avis`,
      `${request.industry} recommand√©`
    ]

    const suggestions = [
      'Cibler les mots-cl√©s long-tail pour r√©duire les co√ªts',
      'Utiliser des extensions d\'annonces pour am√©liorer le CTR',
      'Cr√©er des landing pages d√©di√©es pour chaque groupe d\'annonces'
    ]

    return {
      content: keywords,
      suggestions,
      confidence: 0.6
    }
  }

  private getSimulatedHeadlines(request: AIGenerationRequest): AIGenerationResponse {
    const headlines = [
      `${request.industry} Expert | R√©sultats Garantis`,
      `Conseil ${request.industry} | +200% ROI`,
      `${request.industry} Sp√©cialiste | Gratuit 30min`,
      `Optimisation ${request.industry} | R√©sultats Imm√©diats`,
      `${request.industry} Professionnel | Devis Gratuit`
    ]

    return {
      content: headlines,
      suggestions: [
        'Testez diff√©rentes combinaisons de headlines',
        'Utilisez des extensions d\'annonces pour plus d\'informations'
      ],
      confidence: 0.7
    }
  }

  private getSimulatedDescriptions(request: AIGenerationRequest): AIGenerationResponse {
    const descriptions = [
      `${request.industry} sp√©cialis√© dans l'optimisation des performances. R√©sultats garantis ou rembours√©. Consultation gratuite.`,
      `Strat√©gie ${request.industry} personnalis√©e pour votre entreprise. Augmentation moyenne du ROI de 200%. Devis gratuit.`
    ]

    return {
      content: descriptions,
      suggestions: [
        'Incluez toujours un appel √† l\'action',
        'Utilisez des chiffres et des preuves sociales'
      ],
      confidence: 0.7
    }
  }

  private getSimulatedOptimizationSuggestions(request: AIGenerationRequest): AIGenerationResponse {
    const suggestions = [
      'Pausez les mots-cl√©s avec un CTR < 1% depuis 14 jours',
      'Augmentez les ench√®res de 20% sur les mots-cl√©s avec un ROAS > 3',
      'Cr√©ez 3 nouvelles annonces par groupe d\'annonces',
      'Optimisez les heures de diffusion selon les performances',
      'Ajoutez des extensions d\'annonces pour am√©liorer le CTR'
    ]

    return {
      content: suggestions,
      suggestions: [
        'Priorisez les optimisations par impact potentiel',
        'Testez les changements sur de petits volumes d\'abord'
      ],
      confidence: 0.6
    }
  }

  private getSimulatedPerformanceAnalysis(metrics: any): AIGenerationResponse {
    const analysis = [
      'Probl√®me: CTR faible (2.5%) - en dessous de la moyenne du secteur',
      'Probl√®me: ROAS de 2.2x - objectif non atteint',
      'Solution: Optimiser les annonces pour am√©liorer le CTR',
      'Solution: Ajuster les ench√®res sur les mots-cl√©s performants',
      'Opportunit√©: Tester de nouveaux mots-cl√©s long-tail'
    ]

    return {
      content: analysis,
      suggestions: [
        'Surveillez ces m√©triques r√©guli√®rement',
        'Impl√©mentez les solutions par ordre de priorit√©'
      ],
      confidence: 0.6
    }
  }

  /**
   * G√©n√®re des recommandations d'optimisation
   */
  async generateRecommendations(request: {
    prompt: string
    campaignType: string
    performanceData: any
  }): Promise<{ recommendations: any[] }> {
    try {
      if (!openai) {
        console.log('‚ö†Ô∏è OpenAI non configur√©, utilisation des recommandations simul√©es')
        return { recommendations: [] }
      }

      const enhancedPrompt = `
${request.prompt}

Analyse ces donn√©es de performance et g√©n√®re des recommandations d'optimisation sp√©cifiques et actionnables.

Retourne la r√©ponse au format JSON strict :
{
  "recommendations": [
    {
      "id": "unique-id",
      "type": "BUDGET|BID|KEYWORD|TARGETING|CREATIVE",
      "priority": "HIGH|MEDIUM|LOW",
      "title": "Titre de la recommandation",
      "description": "Description d√©taill√©e",
      "impact": "POSITIVE|NEGATIVE|NEUTRAL",
      "estimatedImprovement": 15,
      "action": "Action sp√©cifique √† effectuer",
      "applied": false
    }
  ]
}

Assure-toi que la r√©ponse est un JSON valide et parsable.
`

      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [
          {
            role: "system",
            content: "Tu es un expert en optimisation Google Ads. R√©ponds uniquement en JSON valide."
          },
          {
            role: "user",
            content: enhancedPrompt
          }
        ],
        max_tokens: 1500,
        temperature: 0.3,
      })

      const response = completion.choices[0]?.message?.content
      
      if (!response) {
        console.log('‚ö†Ô∏è R√©ponse OpenAI vide')
        return { recommendations: [] }
      }

      try {
        // Essayer de parser la r√©ponse JSON
        const parsedResponse = JSON.parse(response)
        
        if (parsedResponse.recommendations && Array.isArray(parsedResponse.recommendations)) {
          console.log('‚úÖ Recommandations g√©n√©r√©es avec succ√®s:', parsedResponse.recommendations.length)
          return parsedResponse
        } else {
          console.log('‚ö†Ô∏è Format de r√©ponse invalide')
          return { recommendations: [] }
        }
      } catch (parseError) {
        console.error('‚ùå Erreur parsing JSON OpenAI:', parseError)
        console.log('R√©ponse brute:', response)
        return { recommendations: [] }
      }
    } catch (error) {
      console.error('Erreur g√©n√©ration recommandations OpenAI:', error)
      return { recommendations: [] }
    }
  }

  /**
   * G√©n√®re un benchmark pour un secteur
   */
  async generateBenchmark(request: {
    industry: string
    campaignType: string
    prompt: string
  }): Promise<any> {
    try {
      if (!openai) {
        console.log('‚ö†Ô∏è OpenAI non configur√©, utilisation du benchmark simul√©')
        return {}
      }

      const completion = await openai.chat.completions.create({
        model: "gpt-4",
        messages: [{ role: "user", content: request.prompt }],
        max_tokens: 800,
        temperature: 0.2,
      })

      const response = completion.choices[0]?.message?.content
      
      // TODO: Parser la r√©ponse JSON structur√©e
      return {}
    } catch (error) {
      console.error('Erreur g√©n√©ration benchmark OpenAI:', error)
      return {}
    }
  }
}

export const openaiService = new OpenAIService() 