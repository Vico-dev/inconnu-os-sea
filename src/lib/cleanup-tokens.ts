import { prisma } from "@/lib/db"

export async function cleanupExpiredTokens() {
  try {
    console.log('üßπ D√©but du nettoyage des tokens expir√©s...')

    // Nettoyer les tokens de v√©rification d'email expir√©s
    const emailResult = await prisma.user.updateMany({
      where: {
        emailVerificationExpires: {
          lt: new Date()
        }
      },
      data: {
        emailVerificationToken: null,
        emailVerificationExpires: null
      }
    })

    console.log(`‚úÖ ${emailResult.count} tokens de v√©rification d'email nettoy√©s`)

    // Nettoyer les tokens de r√©initialisation expir√©s
    const resetResult = await prisma.user.updateMany({
      where: {
        passwordResetExpires: {
          lt: new Date()
        }
      },
      data: {
        passwordResetToken: null,
        passwordResetExpires: null
      }
    })

    console.log(`‚úÖ ${resetResult.count} tokens de r√©initialisation nettoy√©s`)

    console.log('üéâ Nettoyage des tokens expir√©s termin√©')
  } catch (error) {
    console.error('‚ùå Erreur lors du nettoyage des tokens:', error)
  }
}

// Fonction pour ex√©cuter le nettoyage manuellement
export async function runCleanup() {
  await cleanupExpiredTokens()
  process.exit(0)
}

// Ex√©cuter si le script est appel√© directement
if (require.main === module) {
  runCleanup()
} 